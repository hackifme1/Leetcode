// By Chandramani Kumar
// Keep moving and must be simple bro!!!!!
// EspÃ©rons le meilleur mais prÃ©parez-vous au pire ðŸ˜Ž

/* Problem Statement

Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.


Example 1:

Input: words = ["abcw","baz","foo","bar","xtfn","abcdef"]
Output: 16
Explanation: The two words can be "abcw", "xtfn".
Example 2:

Input: words = ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4
Explanation: The two words can be "ab", "cd".
Example 3:

Input: words = ["a","aa","aaa","aaaa"]
Output: 0
Explanation: No such pair of words.
 

Constraints:

2 <= words.length <= 1000
1 <= words[i].length <= 1000
words[i] consists only of lowercase English letters.

*/

Cpp code :

class Solution {

public:
    int maxProduct(vector<string>& words) {
        int n = words.size();
        int l_bit[n];
        
        for(int i=0;i<n;i++)
         {
             l_bit[i] = 0;
         }
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<words[i].size();j++)
            {
                l_bit[i] = l_bit[i]|(1<<(words[i][j]-'a'));
            }
        }
        
        int maxm = 0;
        
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if((l_bit[i]&l_bit[j]) == 0)
                {
                    int temp = words[i].length()*words[j].length();
                    maxm = max(temp,maxm);
                }
            }
        }
        
        return maxm;
    }
};
